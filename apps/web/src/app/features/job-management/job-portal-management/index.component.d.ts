import { OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { JobPortalManagementService, JobPosting, Department, SalaryRange } from './job-portal-management.service';
interface Toast {
    id: string;
    type: 'success' | 'error' | 'info' | 'warning';
    title: string;
    message: string;
    duration?: number;
}
export declare class JobPortalManagementComponent implements OnInit, OnDestroy {
    private jobService;
    private cdr;
    showForm: boolean;
    isEdit: boolean;
    editJobId: string | null;
    jobs: JobPosting[];
    filteredJobs: JobPosting[];
    jobPosting: JobPosting;
    searchTerm: string;
    loading: boolean;
    errorMessage: string;
    successMessage: string;
    operationLoading: boolean;
    operationJobId: string | null;
    operationType: 'create' | 'update' | 'delete' | 'edit' | 'status' | null;
    toasts: Toast[];
    departments: Department[];
    salaryRanges: SalaryRange[];
    currentPage: number;
    totalPages: number;
    totalJobs: number;
    itemsPerPage: number;
    constructor(jobService: JobPortalManagementService, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    getEmptyJobPosting(): JobPosting;
    fetchJobs(page?: number): void;
    fetchDepartments(): void;
    fetchSalaryRanges(): void;
    onSearch(): void;
    onPageChange(page: number): void;
    onAddNewJob(): void;
    onEditJob(job: JobPosting): void;
    onDeleteJob(job: JobPosting): void;
    onStatusChange(job: JobPosting, event: Event): void;
    onUpdateStatus(job: JobPosting, newStatus: string): void;
    onSubmitJob(): void;
    refreshJobList(): void;
    triggerUIUpdate(): void;
    forceRefreshJobList(): void;
    rebuildJobList(): void;
    aggressiveRefresh(): void;
    completeRefresh(): void;
    refreshDataAfterOperation(): void;
    forceUIUpdateWithData(): void;
    fetchAllJobsUnlimited(): void;
    reinitializeComponent(): void;
    manualRefresh(): void;
    ensureDataBinding(): void;
    forceTemplateUpdate(): void;
    rebuildComponentState(): void;
    ensureTemplateUpdate(): void;
    freshStart(): void;
    clearSearch(): void;
    showSuccessMessage(message: string): void;
    onCancel(): void;
    closeForm(): void;
    clearMessages(): void;
    showToast(type: 'success' | 'error' | 'info' | 'warning', title: string, message: string, duration?: number): void;
    removeToast(index: number): void;
    removeToastById(id: string): void;
    getToastIcon(type: string): string;
    setOperationLoading(loading: boolean, jobId?: string | null, type?: 'create' | 'update' | 'delete' | 'edit' | 'status' | null): void;
    getOperationLoadingText(): string;
    getDepartmentName(departmentId: string): string;
    getSalaryRangeDisplay(salaryRange: string): string;
    convertSalaryRangeValueToId(salaryRangeValue: string): string;
    formatDateForInput(dateString: string): string;
    get postingStatusCounts(): {
        [key: string]: number;
    };
    getPageNumbers(): number[];
    showSuccessAnimation(): void;
    animateCardSuccess(jobId: string): void;
    animateCardExit(jobId: string): void;
    animateCardEnter(jobId: string): void;
    setModalActive(active: boolean): void;
}
export {};
//# sourceMappingURL=index.component.d.ts.map