import { Renderer2 } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
interface SensitiveReport {
    id: string;
    name: string;
    description: string;
    reportType: string;
    sensitivityLevel: 'low' | 'medium' | 'high' | 'critical';
    category: string;
    dataFields: string[];
    retentionPolicy: string;
    encryptionRequired: boolean;
    watermarkEnabled: boolean;
    accessLogging: boolean;
    createdBy: string;
    createdAt: Date;
    lastModified: Date;
    status: string;
}
interface RoleAccess {
    id: string;
    roleName: string;
    roleDescription: string;
    permissions: {
        [key: string]: boolean;
    };
    restrictions: any;
    assignedReports: string[];
    assignedBy: string;
    assignedAt: Date;
    expiresAt?: Date;
    status: string;
}
interface AccessRequest {
    id: string;
    requester: string;
    requesterRole: string;
    requesterDepartment: string;
    reportId: string;
    reportName: string;
    requestedPermissions: string[];
    reason: string;
    urgency: string;
    requestedAt: Date;
    status: string;
    reviewedBy?: string;
    reviewedAt?: Date;
    reviewNotes?: string;
    expiresAt?: Date;
}
export declare class SensitiveReportsComponent {
    private fb;
    private renderer;
    private document;
    sensitiveReports: SensitiveReport[];
    roleAccess: RoleAccess[];
    accessRequests: AccessRequest[];
    showViewRoleModal: boolean;
    showAssignRoleModal: boolean;
    showRevokeRoleModal: boolean;
    showCreateReportModal: boolean;
    showEditReportModal: boolean;
    showDeleteReportModal: boolean;
    showEditRoleModal: boolean;
    showDeleteRoleModal: boolean;
    selectedRole: RoleAccess | null;
    selectedRequest: AccessRequest | null;
    selectedReport: SensitiveReport | null;
    selectedRoleEdit: RoleAccess | null;
    editRoleForm: FormGroup;
    assignRoleForm: FormGroup;
    reportForm: FormGroup;
    showViewRequestModal: boolean;
    showEditRequestModal: boolean;
    showDeleteRequestModal: boolean;
    selectedRequestEdit: AccessRequest | null;
    editRequestForm: FormGroup;
    constructor(fb: FormBuilder, renderer: Renderer2, document: Document);
    get isAnyModalOpen(): boolean;
    ngDoCheck(): void;
    getSensitivityIcon(level: string): string;
    getSensitivityColor(level: string): string;
    getCategoryIcon(category: string): string;
    getTimeAgo(date: Date): string;
    getPermissionsText(permissions: any): string;
    getRestrictionsText(restrictions: any): string;
    getUrgencyColor(urgency: string): string;
    getStatusColor(status: string): string;
    viewRoleAccess(role: RoleAccess): void;
    closeViewRoleModal(): void;
    assignRoleAccess(): void;
    closeAssignRoleModal(): void;
    confirmAssignRoleAccess(): void;
    parsePermissions(permString: string): any;
    parseRestrictions(restrString: string): any;
    revokeRoleAccess(role: RoleAccess): void;
    closeRevokeRoleModal(): void;
    confirmRevokeRoleAccess(): void;
    createRoleAccess(): void;
    editRoleAccess(role: RoleAccess): void;
    closeEditRoleModal(): void;
    saveRoleAccess(): void;
    openDeleteRoleModal(role: RoleAccess): void;
    closeDeleteRoleModal(): void;
    confirmDeleteRoleAccess(): void;
    createSensitiveReport(): void;
    closeCreateReportModal(): void;
    editSensitiveReport(report: SensitiveReport): void;
    closeEditReportModal(): void;
    saveReport(): void;
    deleteSensitiveReport(id: string): void;
    closeDeleteReportModal(): void;
    confirmDeleteReport(): void;
    viewAccessRequest(request: AccessRequest): void;
    closeViewRequestModal(): void;
    editAccessRequest(request: AccessRequest): void;
    closeEditRequestModal(): void;
    saveAccessRequest(): void;
    openDeleteRequestModal(request: AccessRequest): void;
    closeDeleteRequestModal(): void;
    confirmDeleteRequest(): void;
    deleteRoleAccess(id: string): void;
    approveAccessRequest(request: AccessRequest): void;
    denyAccessRequest(request: AccessRequest): void;
    deleteAccessRequest(id: string): void;
}
export {};
//# sourceMappingURL=sensitive-reports.component.d.ts.map