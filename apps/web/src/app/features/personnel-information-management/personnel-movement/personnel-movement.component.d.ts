import { OnInit } from '@angular/core';
import { Router } from '@angular/router';
interface PersonnelMovement {
    id: number;
    employeeName: string;
    department: string;
    previousDepartment?: string;
    currentRole: string;
    previousRole?: string;
    movementType: 'Promotion' | 'Transfer' | 'Demotion';
    effectiveDate: string;
    status: 'Approved' | 'Pending' | 'Rejected';
    reasons?: string;
    approvedBy?: string;
    approvedDate?: string;
    remarks?: string;
}
export declare class PersonnelMovementComponent implements OnInit {
    private router;
    personnelMovements: PersonnelMovement[];
    filteredMovements: PersonnelMovement[];
    searchTerm: string;
    currentPage: number;
    itemsPerPage: number;
    totalItems: number;
    departments: string[];
    showNewMovementModal: boolean;
    showViewMovementModal: boolean;
    showEditMovementModal: boolean;
    selectedMovement: PersonnelMovement | null;
    newMovement: Partial<PersonnelMovement>;
    editMovement: Partial<PersonnelMovement>;
    constructor(router: Router);
    ngOnInit(): void;
    loadPersonnelMovements(): void;
    filterMovements(): void;
    get paginatedMovements(): PersonnelMovement[];
    get totalPages(): number;
    get startItem(): number;
    get endItem(): number;
    nextPage(): void;
    previousPage(): void;
    getStatusClass(status: string): string;
    getMovementTypeClass(type: string): string;
    onSearch(): void;
    onNewMovement(): void;
    closeNewMovementModal(): void;
    resetNewMovementForm(): void;
    createMovement(): void;
    onViewMovement(movement: PersonnelMovement): void;
    closeViewMovementModal(): void;
    onEditMovement(movement: PersonnelMovement): void;
    closeEditMovementModal(): void;
    resetEditMovementForm(): void;
    updateMovement(): void;
    onNavigateToWorkflows(): void;
    onNavigateToAuditTrail(): void;
    onDeleteMovement(movement: PersonnelMovement): void;
}
export {};
//# sourceMappingURL=personnel-movement.component.d.ts.map