import { OnInit, Renderer2 } from '@angular/core';
import { Router } from '@angular/router';
import { FormBuilder, FormGroup } from '@angular/forms';
import { CdkDragDrop, CdkDropList } from '@angular/cdk/drag-drop';
import { PersonnelService, Employee } from '../personnel.service';
import { AuthService } from '../../../services/auth.service';
interface DepartmentStat {
    name: string;
    count: number;
    percentage: number;
}
interface StatCard {
    id: string;
    title: string;
    value: number;
    change: number;
    icon: string;
    description: string;
    isVisible: boolean;
    color: string;
    dataType: 'number' | 'percentage' | 'rating';
}
export declare class AdminDashboardComponent implements OnInit {
    private router;
    private fb;
    private renderer;
    private personnelService;
    private authService;
    dropList?: CdkDropList;
    title: string;
    totalEmployees: number;
    employeeChange: number;
    pendingRequests: number;
    requestChange: number;
    recentMovements: number;
    movementChange: number;
    turnoverRate: number;
    turnoverRateChange: number;
    satisfactionLevel: number;
    satisfactionChange: number;
    performanceRating: number;
    performanceChange: number;
    departmentStats: DepartmentStat[];
    recentEmployees: Employee[];
    currentPage: number;
    pageSize: number;
    totalItems: number;
    totalPages: number;
    searchTerm: string;
    paginatedEmployees: Employee[];
    Math: Math;
    showEditModal: boolean;
    editEmployeeForm: FormGroup;
    selectedEmployee: Employee | null;
    isEditMode: boolean;
    selectedCard: StatCard | null;
    showCustomizeModal: boolean;
    customizeForm: FormGroup;
    availableColors: {
        name: string;
        value: string;
    }[];
    statCards: StatCard[];
    newCardTemplate: StatCard;
    pieColors: string[];
    chartTypes: Array<'pie' | 'bar' | 'line' | 'area'>;
    currentChartTypeIndex: number;
    chartType: 'pie' | 'bar' | 'line' | 'area';
    showChartTypeMenu: boolean;
    isChartEditMode: boolean;
    chartTooltip: {
        visible: boolean;
        x: number;
        y: number;
        label: string;
        value: number;
    };
    totalActiveEmployees: number;
    totalInactiveEmployees: number;
    totalOnleaveEmployees: number;
    metricOptions: {
        title: string;
        value: number;
        description: string;
        dataType: 'number' | 'percentage' | 'rating';
    }[];
    titleIconMap: {
        [key: string]: string;
    };
    loadingEmployees: boolean;
    employeeLoadError: string;
    constructor(router: Router, fb: FormBuilder, renderer: Renderer2, personnelService: PersonnelService, authService: AuthService);
    onScroll(): void;
    ngOnInit(): void;
    fetchEmployees(): void;
    updatePagination(): void;
    getPageNumbers(): number[];
    onPageChange(page: number): void;
    onPageSizeChange(event: Event): void;
    onSearch(event: Event): void;
    onAddEmployee(): void;
    onEditEmployee(employee: Employee): void;
    closeEditModal(event: Event): void;
    onSubmitEdit(): void;
    onDeleteEmployee(employee: Employee): void;
    onProcessRequests(): void;
    getDepartmentIcon(department: string): string;
    private checkScroll;
    toggleEditMode(): void;
    saveDashboardChanges(): void;
    onCardClick(card: StatCard): void;
    saveCustomization(): void;
    closeCustomizeModal(event: Event): void;
    getFormattedValue(card: StatCard): string;
    onDrop(event: CdkDragDrop<StatCard[]>): void;
    onDragStarted(event: any): void;
    onDragEnded(event: any): void;
    addNewCard(): void;
    removeCard(card: StatCard): void;
    getPieColor(index: number): string;
    getPieDashArray(index: number): string;
    getPieDashOffset(index: number): string;
    setChartType(type: 'pie' | 'bar' | 'line' | 'area'): void;
    prevChartType(): void;
    nextChartType(): void;
    getChartTypeLabel(): string;
    toggleChartTypeMenu(): void;
    getMaxDeptCount(): number;
    getLineChartPoints(xOffset?: number, yOffset?: number): string;
    getAreaChartPoints(xOffset?: number, yOffset?: number): string;
    getDepartmentTotal(): number;
    getDepartmentPercentage(dept: DepartmentStat): number;
    getColumnChartX(i: number): number;
    getColumnChartHeight(dept: DepartmentStat): number;
    getColumnChartY(dept: DepartmentStat): number;
    enterChartEditMode(): void;
    exitChartEditMode(): void;
    showChartTooltip(event: MouseEvent, label: string, value: number): void;
    moveChartTooltip(event: MouseEvent): void;
    hideChartTooltip(): void;
    ngAfterViewInit(): void;
    onTitleChange(event: Event): void;
    saveStatCardsToStorage(): void;
    saveChartTypeToStorage(): void;
    getPreviewCard(): StatCard;
}
export {};
//# sourceMappingURL=admin-dashboard.component.d.ts.map