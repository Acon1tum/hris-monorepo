import { OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
interface Employee {
    id: string;
    employeeId: string;
    name: string;
    department: string;
    position: string;
    basicSalary: number;
    hireDate: Date;
    employmentStatus: 'active' | 'resigned' | 'terminated';
    resignationDate?: Date;
    terminationDate?: Date;
    lastWorkingDay?: Date;
    unusedLeaves: number;
    leaveBalance: {
        vacation: number;
        sick: number;
        personal: number;
    };
}
interface FinalPay {
    id: string;
    employeeId: string;
    employeeName: string;
    department: string;
    employmentStatus: 'resigned' | 'terminated';
    lastWorkingDay: Date;
    computationDate: Date;
    basicSalary: number;
    daysWorked: number;
    proratedSalary: number;
    unusedVacationLeaves: number;
    unusedSickLeaves: number;
    unusedPersonalLeaves: number;
    leaveMonetization: number;
    thirteenthMonthPay: number;
    separationPay: number;
    otherBenefits: number;
    loans: number;
    advances: number;
    taxes: number;
    otherDeductions: number;
    grossPay: number;
    totalDeductions: number;
    netPay: number;
    status: 'pending' | 'computed' | 'approved' | 'released' | 'cancelled';
    computedAt?: Date;
    approvedAt?: Date;
    releasedAt?: Date;
    approvedBy?: string;
    releasedBy?: string;
    paymentMethod?: string;
    remarks?: string;
}
interface LeaveComputation {
    leaveType: 'vacation' | 'sick' | 'personal';
    unusedDays: number;
    dailyRate: number;
    monetizedAmount: number;
}
export declare class FinalPayProcessComponent implements OnInit {
    private fb;
    private router;
    activeTab: 'process' | 'track';
    selectedEmployee: Employee | null;
    selectedFinalPays: string[];
    computationInProgress: boolean;
    releaseInProgress: boolean;
    showComputationModal: boolean;
    showReleaseModal: boolean;
    showEmployeeModal: boolean;
    finalPayForm: FormGroup;
    releaseForm: FormGroup;
    employees: Employee[];
    finalPays: FinalPay[];
    leaveComputations: LeaveComputation[];
    constructor(fb: FormBuilder, router: Router);
    ngOnInit(): void;
    loadEmployees(): void;
    loadFinalPays(): void;
    selectEmployee(employee: Employee): void;
    clearSelection(): void;
    selectAllFinalPays(): void;
    deselectAllFinalPays(): void;
    toggleFinalPaySelection(payId: string): void;
    isFinalPaySelected(payId: string): boolean;
    computeLeaveMonetization(): void;
    computeFinalPay(): void;
    calculateMonthsWorked(hireDate: Date, lastWorkingDay: Date): number;
    approveFinalPay(payId: string): void;
    releaseFinalPay(): void;
    getFinalPaysByStatus(status: string): FinalPay[];
    getFinalPayCountByStatus(status: string): number;
    getEmployeesByStatus(status: string): Employee[];
    formatCurrency(amount: number): string;
    formatDate(date: Date): string;
    formatDateTime(date: Date): string;
    getStatusColor(status: string): string;
    getStatusIcon(status: string): string;
    getEmploymentStatusColor(status: string): string;
    openComputationModal(): void;
    closeComputationModal(): void;
    openReleaseModal(): void;
    closeReleaseModal(): void;
    openEmployeeModal(): void;
    closeEmployeeModal(): void;
    getTotalLeaveMonetization(): number;
    viewFinalPayDetails(pay: FinalPay): void;
}
export {};
//# sourceMappingURL=final-pay-process.component.d.ts.map