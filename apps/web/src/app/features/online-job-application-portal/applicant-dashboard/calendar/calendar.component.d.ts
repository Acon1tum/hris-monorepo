import { ActivatedRoute, Router } from '@angular/router';
import { InterviewService, InterviewInfo } from '../interview.service';
export declare class CalendarComponent {
    private route;
    private interviewService;
    private router;
    selectedDate: Date;
    miniMonth: number;
    miniYear: number;
    mainMonth: number;
    mainYear: number;
    weekDays: string[];
    allInterviews: InterviewInfo[];
    miniInterviewDays: number[];
    mainInterviewDays: number[];
    selectedDayInterviews: InterviewInfo[];
    showModal: boolean;
    modalInterview: InterviewInfo | null;
    viewModes: {
        label: string;
        shortcut: string;
    }[];
    viewModeLabel: string;
    showViewDropdown: boolean;
    viewMode: string;
    get showDayView(): boolean;
    get showWeekView(): boolean;
    get weekStartDate(): Date;
    get weekViewDays(): Date[];
    isSelectedWeekDay(day: Date): boolean;
    hours: number[];
    showCalendars: boolean;
    toggleCalendars(): void;
    constructor(route: ActivatedRoute, interviewService: InterviewService, router: Router);
    updateInterviewMarkers(): void;
    updateSelectedDayInterviews(): void;
    getMiniDayInterviews(day: number): InterviewInfo[];
    getMainDayInterviews(day: number): InterviewInfo[];
    getStatusColor(status: string): string;
    openInterviewModal(interview: InterviewInfo): void;
    closeInterviewModal(): void;
    getMiniMonthLabel(): string;
    getMainMonthLabel(): string;
    getMiniFirstDayOfWeek(): number;
    getMiniDaysInMonth(): number[];
    getMainFirstDayOfWeek(): number;
    getMainDaysInMonth(): number[];
    prevMiniMonth(): void;
    nextMiniMonth(): void;
    prevMainMonth(): void;
    nextMainMonth(): void;
    selectMiniDate(day: number): void;
    selectMainDate(day: number): void;
    isSelectedMiniDate(day: number): boolean;
    isSelectedMainDate(day: number): boolean;
    isMiniInterviewDay(day: number): boolean;
    isMainInterviewDay(day: number): boolean;
    goBack(): void;
    goToToday(): void;
    toggleViewDropdown(): void;
    selectViewMode(mode: {
        label: string;
        shortcut: string;
    }): void;
    isToday(day: Date): boolean;
    getCurrentTimeTop(): string;
    getInterviewHour(interview: InterviewInfo): number;
    getInterviewsForDay(day: Date): InterviewInfo[];
}
//# sourceMappingURL=calendar.component.d.ts.map